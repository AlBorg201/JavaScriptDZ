(()=>{var e={3:e=>{"use strict";e.exports=require("path")},56:e=>{"use strict";e.exports=JSON.parse('{"name":"dotenv","version":"16.5.0","description":"Loads environment variables from .env file","main":"lib/main.js","types":"lib/main.d.ts","exports":{".":{"types":"./lib/main.d.ts","require":"./lib/main.js","default":"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},"scripts":{"dts-check":"tsc --project tests/types/tsconfig.json","lint":"standard","pretest":"npm run lint && npm run dts-check","test":"tap run --allow-empty-coverage --disable-coverage --timeout=60000","test:coverage":"tap run --show-full-coverage --timeout=60000 --coverage-report=lcov","prerelease":"npm test","release":"standard-version"},"repository":{"type":"git","url":"git://github.com/motdotla/dotenv.git"},"homepage":"https://github.com/motdotla/dotenv#readme","funding":"https://dotenvx.com","keywords":["dotenv","env",".env","environment","variables","config","settings"],"readmeFilename":"README.md","license":"BSD-2-Clause","devDependencies":{"@types/node":"^18.11.3","decache":"^4.6.2","sinon":"^14.0.1","standard":"^17.0.0","standard-version":"^9.5.0","tap":"^19.2.0","typescript":"^4.8.4"},"engines":{"node":">=12"},"browser":{"fs":false}}')},284:(e,t,o)=>{"use strict";o.r(t)},383:e=>{"use strict";e.exports=require("fs")},856:e=>{"use strict";e.exports=require("http")},857:e=>{"use strict";e.exports=require("os")},982:e=>{"use strict";e.exports=require("crypto")},998:(e,t,o)=>{const n=o(383),r=o(3),s=o(857),a=o(982),i=o(56).version,c=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/gm;function l(e){console.log(`[dotenv@${i}][DEBUG] ${e}`)}function p(e){return e&&e.DOTENV_KEY&&e.DOTENV_KEY.length>0?e.DOTENV_KEY:process.env.DOTENV_KEY&&process.env.DOTENV_KEY.length>0?process.env.DOTENV_KEY:""}function d(e,t){let o;try{o=new URL(t)}catch(e){if("ERR_INVALID_URL"===e.code){const e=new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");throw e.code="INVALID_DOTENV_KEY",e}throw e}const n=o.password;if(!n){const e=new Error("INVALID_DOTENV_KEY: Missing key part");throw e.code="INVALID_DOTENV_KEY",e}const r=o.searchParams.get("environment");if(!r){const e=new Error("INVALID_DOTENV_KEY: Missing environment part");throw e.code="INVALID_DOTENV_KEY",e}const s=`DOTENV_VAULT_${r.toUpperCase()}`,a=e.parsed[s];if(!a){const e=new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${s} in your .env.vault file.`);throw e.code="NOT_FOUND_DOTENV_ENVIRONMENT",e}return{ciphertext:a,key:n}}function u(e){let t=null;if(e&&e.path&&e.path.length>0)if(Array.isArray(e.path))for(const o of e.path)n.existsSync(o)&&(t=o.endsWith(".vault")?o:`${o}.vault`);else t=e.path.endsWith(".vault")?e.path:`${e.path}.vault`;else t=r.resolve(process.cwd(),".env.vault");return n.existsSync(t)?t:null}function v(e){return"~"===e[0]?r.join(s.homedir(),e.slice(1)):e}const f={configDotenv:function(e){const t=r.resolve(process.cwd(),".env");let o="utf8";const s=Boolean(e&&e.debug);e&&e.encoding?o=e.encoding:s&&l("No encoding is specified. UTF-8 is used by default");let a,i=[t];if(e&&e.path)if(Array.isArray(e.path)){i=[];for(const t of e.path)i.push(v(t))}else i=[v(e.path)];const c={};for(const t of i)try{const r=f.parse(n.readFileSync(t,{encoding:o}));f.populate(c,r,e)}catch(e){s&&l(`Failed to load ${t} ${e.message}`),a=e}let p=process.env;return e&&null!=e.processEnv&&(p=e.processEnv),f.populate(p,c,e),a?{parsed:c,error:a}:{parsed:c}},_configVault:function(e){Boolean(e&&e.debug)&&l("Loading env from encrypted .env.vault");const t=f._parseVault(e);let o=process.env;return e&&null!=e.processEnv&&(o=e.processEnv),f.populate(o,t,e),{parsed:t}},_parseVault:function(e){const t=u(e),o=f.configDotenv({path:t});if(!o.parsed){const e=new Error(`MISSING_DATA: Cannot parse ${t} for an unknown reason`);throw e.code="MISSING_DATA",e}const n=p(e).split(","),r=n.length;let s;for(let e=0;e<r;e++)try{const t=d(o,n[e].trim());s=f.decrypt(t.ciphertext,t.key);break}catch(t){if(e+1>=r)throw t}return f.parse(s)},config:function(e){if(0===p(e).length)return f.configDotenv(e);const t=u(e);return t?f._configVault(e):(o=`You set DOTENV_KEY but you are missing a .env.vault file at ${t}. Did you forget to build it?`,console.log(`[dotenv@${i}][WARN] ${o}`),f.configDotenv(e));var o},decrypt:function(e,t){const o=Buffer.from(t.slice(-64),"hex");let n=Buffer.from(e,"base64");const r=n.subarray(0,12),s=n.subarray(-16);n=n.subarray(12,-16);try{const e=a.createDecipheriv("aes-256-gcm",o,r);return e.setAuthTag(s),`${e.update(n)}${e.final()}`}catch(e){const t=e instanceof RangeError,o="Invalid key length"===e.message,n="Unsupported state or unable to authenticate data"===e.message;if(t||o){const e=new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");throw e.code="INVALID_DOTENV_KEY",e}if(n){const e=new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");throw e.code="DECRYPTION_FAILED",e}throw e}},parse:function(e){const t={};let o,n=e.toString();for(n=n.replace(/\r\n?/gm,"\n");null!=(o=c.exec(n));){const e=o[1];let n=o[2]||"";n=n.trim();const r=n[0];n=n.replace(/^(['"`])([\s\S]*)\1$/gm,"$2"),'"'===r&&(n=n.replace(/\\n/g,"\n"),n=n.replace(/\\r/g,"\r")),t[e]=n}return t},populate:function(e,t,o={}){const n=Boolean(o&&o.debug),r=Boolean(o&&o.override);if("object"!=typeof t){const e=new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");throw e.code="OBJECT_REQUIRED",e}for(const o of Object.keys(t))Object.prototype.hasOwnProperty.call(e,o)?(!0===r&&(e[o]=t[o]),n&&l(!0===r?`"${o}" is already defined and WAS overwritten`:`"${o}" is already defined and was NOT overwritten`)):e[o]=t[o]}};e.exports.configDotenv=f.configDotenv,e.exports._configVault=f._configVault,e.exports._parseVault=f._parseVault,e.exports.config=f.config,e.exports.decrypt=f.decrypt,e.exports.parse=f.parse,e.exports.populate=f.populate,e.exports=f}},t={};function o(n){var r=t[n];if(void 0!==r)return r.exports;var s=t[n]={exports:{}};return e[n](s,s.exports,o),s.exports}o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};const n=o(856),r=o(383),s=o(3);o(998).config({path:s.resolve(__dirname,"../.env.prod")}),o(284);const a=s.resolve(__dirname,"../dist/index.html"),i=s.resolve(__dirname,"../dist/styles.css"),c=process.env.HOST,l=process.env.PORT;n.createServer(((e,t)=>{console.log(`Получен запрос: ${e.url}`),"/"===e.url||"/index.html"===e.url?r.readFile(a,((e,o)=>{if(e)return t.statusCode=500,t.setHeader("Content-Type","text/plain"),t.end("Internal Server Error"),void console.error("Error reading HTML file:",e);t.statusCode=200,t.setHeader("Content-Type","text/html"),t.end(o)})):"/styles.css"===e.url?r.readFile(i,((e,o)=>{if(e)return t.statusCode=500,t.setHeader("Content-Type","text/plain"),t.end("Internal Server Error"),void console.error("Error reading CSS file:",e);t.statusCode=200,t.setHeader("Content-Type","text/css"),t.end(o)})):(t.statusCode=404,t.setHeader("Content-Type","text/plain"),t.end("Not Found"))})).listen(l,c,(()=>{console.log(`Сервер запущен на ${c}:${l}`),console.log("Environment:","prod"),console.log("API URL:",process.env.API_URL),console.log("Database Host:",process.env.DB_HOST),console.log("Database Port:",process.env.DB_PORT),console.log("Log Level:",process.env.LOG_LEVEL)}))})();